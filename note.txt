version of express= semanticVersioning [semVer{major.minor.ptach( "express": "^4.21.1")}]

port number:0 to 65,536 where up to 1100 is used for computer's internal process which is called as internal port.
mysql port no:3306
localhost:3000
127.0.0.1:3000
line 5 and 6 are same don't confuse.
nodemon:- for resolving the problem of tping node app.js for every code change.
package.json file ko script ma start xa vaney npm start handa hunxa sun garda tara aru name xa vaney npm run name hannaparxa>>>
//JSON:-why json(javascript object notation)??
=>the syantax for different programming language is different .so to solve this problem we use json .when we use json it is universal.All the .programming language python java flutter can accept the data.
=>the date sent from json will go serialize and simple .
=>json is lightweigth so response time is faster.
json is better than XML.
use/work:
1.store data;
2.transfer of data.

//Mongodb:- non sql dbms
mongoose(odm):- npm package who is helping hand for mangodb, it is a agent to connect node js with Mongodb
CRUD(create read updtae delete) implementation..: all the websites use curd implementation for ed facebook we can create post,read the post from other update the post delete the post...\
//C=Create
schema:table ma row colomn kasari hunupraxa teo dekhauxa..
class Schema {
  Schema(title){
    console.log(title)
  }
}
const schema= new Schema("Hello")
this and this same:const Schema = mongoose.Schema;
for post request
body>raw>json
pathayeko jati sabai data req.body ma aunxa 
tara img,pdf haru chai req.file ma aunxa..
///---imp resaon--//:
express ley js bujhna sakdaina so post method ma garda express lai potential dina top ma "app.use(express.json());" code add garna parxa..
react ma frontend nahuda ,laravel use gada "app.use(express.urlencode({extende:true}))"
yedi key value same vayeo vaney create garda yeutavalue hakey hunxa
jastai
bookName:bookName ko thauma 
bookName, matra kehda hunxa.
jaba kunai kam garna time lagxa/databasema kunai pani operation hunxa hamiley teslai await dina parxa ra jaha await hunxa teha async funtion hunai praxa.
mongodb ma collection banda ( const Book = mongoose.model("Name", bookSchema);) yeo codeko "Name" ko pural ra smallcase ma banxa ie "names".
 //R=Read
 read can be of two type 1.all data read(find()  .../book) 1.2.single read(findById() => pass the id in the body of req. .../book/:id) 
 note: for dynamic nature of id we have to put isto(:) infront of id.
 //D=delete
 delete= findByIdAndDelete(id)
 CSRF attack(Cross-Site Request Forgery):A CSRF attack tricks a user's web browser into performing an unwanted action on a trusted site. This can happen when a malicious website, email, blog, instant message, or program tricks the user's browser.
 so use delete() instead of get() for deleteing ....
 //U=updateupdate=findByIdAndUpdate(id)
 REST and RESTFUL APIs:::
 restful:yeuta standard ma baseyra api banaunu ..path same(/book) hunxa like book /book/id for delete update etc...// hamiley yesari lehxaum paxi..
 router.route("/books/:id").patch().delete().update().
rest api:path chai sementic hunxa like for delete /deletebook for update /updatebook ..
send files (images, videos, documents) in node js....(Multer)
axios:api browser ma hit garauney agent ho
in react: npm i axios
CORS:NPM CORS. Cross-Origin Resource Sharing (CORS) is a fundamental security mechanism implemented by web browsers to prevent unauthorized access to resources on a web page from different origins

why we need it?
CSRF (cross site request forgey)  yeuta siteko data or cookie haru lai  arko site ma access garna paunuho...
xss
SOP(Same origin policy):this is bakwas policy;saab nai blacklist ma hunxa

current origin-jun website ho
cross origin-jun api hit hannu xa;
rule between current origin and cross origin:
should have same protocol(http or https),port,hostname.
CORS(cross origin resource sharing): blacklist ra whitelist huxa kunlai allow garney kunlai nagarney..
whitelist ma rakhda yedi universal banauna xa vaney * use garney
by default kunai pani connect hunna hamiley api lai connect huna access dina parxa * sign rakheyra.
    onChange={(e) => setImage(e.target.files[0])} for accesing the single files 
    when posting the data from frontend to backend:
    1st way:
    const AddBook = () => {
  const [bookName, setBookName] = useState("");
  const [bookPrice, setBookPrice] = useState("");
  const [isbnNumber, setIsbnNumber] = useState(null);
  const [authorName, setAuthorName] = useState("");
  const [publishedAt, setPublishedAt] = useState("");
  const [publication, setPublication] = useState("");
  const [image, setImage] = useState(null);
  const [description, setDescription] = useState("");
  const handleSubmit = async (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('bookName',bookName)
    formData.append('bookPrice',bookPrice)
    formData.append('isbnNumber',isbnNumber)
    formData.append('authorName',authorName)
    formData.append('publishedAt',publishedAt)
    formData.append('publication',publication)
    formData.append('image',image)
    formData.append('description',description)
    const response = await axios.post("http://localhost:3000/book", formData);
  };
  in this the problem is we have to make multiple state this take lot of time so not the good way..
  second way:
  const [data,setData]=useState({
  bookName:'',
  bookPrice:null,
  isbnNumber:null,
  authorName:'',
  publishedAt:null,
  publication:'',
  decription:'',
})
const handelChange =(e)=>{
const{name,value}=(e.target)
setData({
  ...data,//... operator ley agadi j xa xodey vanna khojeyko ho //vannaley agadi input garisakeyko data preserve garx new coming datalai matra change garxa do console.log(data) to view what actually is happening..
  [name]:value
})
}
const [image, setImage] = useState(null);
